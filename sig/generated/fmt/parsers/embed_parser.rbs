# Generated from lib/fmt/parsers/embed_parser.rb with RBS::Inline

module Fmt
  # Parses embeds from a string and builds an AST (Abstract Syntax Tree)
  class EmbedParser < Parser
    START: untyped

    FINISH: untyped

    # Constructor
    # @rbs urtext: String -- original source code
    # @rbs scanner: StringScanner?
    def initialize: (?String urtext, ?scanner: StringScanner?) -> untyped

    attr_reader urtext: untyped

    attr_reader scanner: untyped

    # Parses the urtext (original source code)
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def parse: () -> Node

    # Extracts components for building the AST (Abstract Syntax Tree)
    # @rbs return: Hash[Symbol, Object] -- extracted components
    def extract: () -> Hash[Symbol, Object]

    # Transforms extracted components into an AST (Abstract Syntax Tree)
    # @rbs embed: String -- extracted embed
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def transform: (embed: String) -> Node

    private

    # Indicates if the embed string is balanced
    # @rbs embed: String
    # @rbs return: bool
    def balanced?: (String embed) -> bool

    # Indicates if the embed string is unbalanced
    # @rbs embed: String
    # @rbs return: bool
    def unbalanced?: (String embed) -> bool
  end
end
