# Generated from lib/fmt/parsers/parser.rb with RBS::Inline

module Fmt
  # Responsible for parsing various inputs and returning an AST (Abstract Syntax Tree)
  #
  # Mechanics are similar to an ETL pipeline (Extract, Transform, Load), however,
  # parsers only handle extracting and transforming.
  #
  # Loading is handled by AST processors (Models)
  # @see lib/fmt/models/
  class Parser
    Cache: untyped

    attr_reader ast: untyped

    # Parses input passed to the constructor and returns an AST (Abstract Syntax Tree)
    #
    # 1. Extract components
    # 2. Transform to AST
    #
    # @note Subclasses must implement the extract and transform methods
    #
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def parse: () -> Node

    # Extracts components for building the AST (Abstract Syntax Tree)
    # @rbs return: Hash[Symbol, Object] -- extracted components
    def extract: () -> Hash[Symbol, Object]

    # Transforms extracted components into an AST (Abstract Syntax Tree)
    # @rbs kwargs: Hash[Symbol, Object] -- extracted components
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def transform: (**untyped kwargs) -> Node

    # Builds a cache key specific to the parser
    # @rbs args: Array[Object] -- args to use in the cache key
    # @rbs return: String
    def cache_key: (*untyped args) -> String

    # Cache helper that fetches a value from the cache
    # @rbs args: Array[Object] -- args to use in the cache key
    # @rbs block: Proc -- block to execute if the value is not found in the cache
    # @rbs return: Object
    def cache: (*untyped args) ?{ (?) -> untyped } -> Object
  end
end
