# Generated from lib/fmt/parsers/template_parser.rb with RBS::Inline

module Fmt
  # Parses a template from a string and builds an AST (Abstract Syntax Tree)
  class TemplateParser < Parser
    EMBED_PEEK: ::Regexp

    PIPELINE_HEAD: ::Regexp

    PIPELINE_PEEK: ::Regexp

    PIPELINE_TAIL: ::Regexp

    # Constructor
    # @rbs urtext: String -- original source code
    def initialize: (?String urtext) -> untyped

    attr_reader urtext: untyped

    # Parses the urtext (original source code)
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def parse: () -> Node

    # Extracts components for building the AST (Abstract Syntax Tree)
    # @note Extraction is delegated to the PipelineParser and EmbedParser in transform
    # @rbs return: Hash
    def extract: () -> Hash

    # Transforms extracted components into an AST (Abstract Syntax Tree)
    # @rbs embeds: Array[Hash] -- extracted embeds
    # @rbs pipelines: Array[String] -- extracted pipelines
    # @rbs source: String -- parsed source code
    # @rbs return: Node -- AST (Abstract Syntax Tree)
    def transform: (embeds: Array[Hash], pipelines: Array[String], source: String) -> Node

    private

    # stack.zero? ? string[index...rindex] : nil
    # end
    def extract_next_embed: (untyped scanner) -> untyped

    # Extracts embed metadata from the source
    # @rbs return: Array[Hash] -- extracted embeds
    def extract_embeds: (untyped source) -> Array[Hash]

    # Extracts the next pipeline with the scanner
    # @rbs scanner: StringScanner -- scanner to extract from
    # @rbs return: String? -- extracted pipeline
    def extract_next_pipeline: (StringScanner scanner) -> String?

    # Extracts pipelines from the source
    # @rbs source: String -- source code to extract pipelines from
    # @rbs return: Array[String] -- extracted pipelines
    def extract_pipelines: (String source) -> Array[String]
  end
end
