# Generated from lib/fmt/registries/registry.rb with RBS::Inline

module Fmt
  # Registry for storing and retrieving String formatters i.e. Procs
  class Registry
    extend Forwardable

    INSTANCE_VAR: ::Symbol

    # Constructor
    def initialize: () -> untyped

    # Indicates if a method name is registered for any Class
    # @rbs method_name: Symbol -- method name to check
    # @rbs return: bool
    def any?: (Symbol method_name) -> bool

    # Indicates if a method name is unregistered
    # @rbs method_name: Symbol -- method name to check
    # @rbs return: bool
    def none?: (Symbol method_name) -> bool

    # Adds a keypair to the registry
    # @rbs key: Array[Class | Module, Symbol] -- key to use
    # @rbs overwrite: bool -- overwrite the existing keypair (default: false)
    # @rbs block: Proc -- Proc to add (optional, if proc is provided)
    # @rbs return: Proc
    def add: (Array[Class | Module, Symbol] key, ?overwrite: bool) ?{ (?) -> untyped } -> Proc

    # Deletes a keypair from the registry
    # @rbs key: Array[Class | Module, Symbol] -- key to delete
    # @rbs return: Proc?
    def delete: (Array[Class | Module, Symbol] key) -> Proc?

    # Fetches a Proc from the registry
    # @rbs key: Array[Class | Module, Symbol] -- key to retrieve
    # @rbs callable: Proc -- Proc to use if the key is not found (optional, if block is provided)
    # @rbs block: Proc -- block to use if the key is not found (optional, if proc is provided)
    # @rbs return: Proc
    def fetch: (Array[Class | Module, Symbol] key, ?callable: Proc) ?{ (?) -> untyped } -> Proc

    # Retrieves the registered key for a Proc
    # @rbs callable: Proc -- Proc to retrieve the key for
    # @rbs return: Symbol?
    def key_for: (Proc callable) -> Symbol?

    # Merges another registry into this one
    # @rbs other: Fmt::Registry -- other registry to merge
    # @rbs return: Fmt::Registry
    def merge!: (Fmt::Registry other) -> Fmt::Registry

    # Executes a block with registry overrides
    #
    # @note Overrides will temporarily be added to the registry
    #       and will overwrite existing entries for the duration of the block
    #       Non overriden entries remain unchanged
    #
    # @rbs overrides: Hash[Array[Class | Module, Symbol], Proc] -- overrides to apply
    # @rbs block: Proc -- block to execute with overrides
    # @rbs return: void
    def with_overrides: (Hash[Array[Class | Module, Symbol], Proc] overrides) ?{ (?) -> untyped } -> void

    attr_reader store: untyped

    # Hash of registered method names
    # @rbs return: Hash[Symbol, TrueClass]
    def method_names: () -> Hash[Symbol, TrueClass]
  end
end
